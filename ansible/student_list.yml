---
- name: "student_list installation"
  hosts: prod
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Log into private registry and force re-authorization
      community.docker.docker_login:
        registry_url: "{{ registry_url }}"
        username: "{{ registry_username }}"
        password: "{{ registry_password }}"
        reauthorize: true

    - name: Create api directory if it does not exist
      ansible.builtin.file:
        path: ~/simple_api
        state: directory
        mode: '0755'

    - name: Generate student_age.json
      template:
        src: ../simple_api/student_age.json
        dest: ~/simple_api/student_age.json
        mode: 0644

    - name: "Create a network"
      docker_network:
        name: "student_list"

    - name: Create api containers
      docker_container:
        name: "student_list"
        image: "{{ registry_url }}/team2/student_list"
        pull: true
        recreate: true
        volumes:
          - ~/student_age.json:/data/student_age.json
        networks:
          - name: "student_list"
        healthcheck:
          test: >
            curl -fsu "{{ secret_api_username }}":"{{ secret_api_password }}"
            http://localhost:5000/pozos/api/v1.0/get_student_ages || exit 1
          timeout: 30s
          interval: 1m
          retries: 3

    - name: Create website directory if it does not exist
      ansible.builtin.file:
        path: ~/website
        state: directory
        mode: '0755'

    - name: Generate website index.php
      template:
        src: ../website/index.php
        dest: ~/website/index.php
        mode: 0644

    - name: Generate website style.css
      template:
        src: ../website/style.css
        dest: ~/website/style.css
        mode: 0644

    - name: Generate website script.js
      template:
        src: ../website/script.js
        dest: ~/website/script.js
        mode: 0644

    - name: Create website containers
      docker_container:
        name: "website"
        image: "php:apache"
        ports: 80:80
        pull: true
        recreate: true
        volumes:
          - ~/website:/var/www/html
        networks:
          - name: "student_list"
        env:
          USERNAME: "{{ api_username }}"
          PASSWORD: "{{ api_password }}"
        healthcheck:
          test: curl -fs http://localhost || exit 1
          timeout: 30s
          interval: 1m
          retries: 3

    - name: Prune everything to save space
      community.docker.docker_prune:
        containers: yes
        images: yes
        networks: yes
        volumes: yes
        builder_cache: yes
...
